// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String   @id @default(uuid())
  email       String   @unique
  fullName    String
  username    String   @unique
  phoneNumber String
  dateOfBirth DateTime
  latitude    Decimal? @db.Decimal(9, 6)
  longitude   Decimal? @db.Decimal(9, 6)
  imageUrl    String?  @default("https://athena-img.s3.ap-southeast-1.amazonaws.com/default-avatar.png")
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  friends  Friendship[] @relation("UserFriendship")
  friendOf Friendship[] @relation("FriendFriendship")

  messages          Message[]
  posts              Post[]
  reports            Report[]
  publicInformations PublicInformation[]
  comments          Comment[]

  @@map("users")
}

model Friendship {
  friendshipId String            @id @default(uuid())
  user         User              @relation(fields: [userId], references: [userId], "UserFriendship")
  userId       String
  friend       User              @relation(fields: [friendId], references: [userId], "FriendFriendship")
  friendId     String
  status       FriendshipStatus?
  chatRoomId   String?
  chatRoom     ChatRoom?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([userId, friendId])
  @@unique([friendId, userId])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model ChatRoom {
  chatRoomId String   @id @default(uuid())
  createdAt  DateTime @default(now())

  friendshipId String     @unique
  friendship   Friendship @relation(fields: [friendshipId], references: [friendshipId])

  messages Message[]

  @@map("chat_rooms")
}

model Message {
  messageId String      @id @default(uuid())
  content   String
  type      MessageType
  createdAt DateTime    @default(now())

  senderId String
  sender   User   @relation(fields: [senderId], references: [userId])

  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])

  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  LOCATION
}

model Post {
  postId    String   @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())

  authorId String 
  author   User   @relation(fields: [authorId], references: [userId])

  publicInformation PublicInformation?
  comments          Comment[]

  @@map("posts")
}

model PublicInformation {
  publicInformationId String   @id @default(uuid())
  latitude            Decimal? @db.Decimal(9, 6)
  longitude           Decimal? @db.Decimal(9, 6)

  authorId String
  author   User   @relation(fields: [authorId], references: [userId])

  postId String @unique
  post   Post   @relation(fields: [postId], references: [postId])

  report Report[]

  @@map("public_informations")
}

model Report {
  reportId String @id @default(uuid())
  reason   String

  authorId String
  author   User   @relation(fields: [authorId], references: [userId])

  publicInformationId String
  publicInformation   PublicInformation @relation(fields: [publicInformationId], references: [publicInformationId])

  @@map("reports")
}

model Comment {
  commentId String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  authorId String
  author   User   @relation(fields: [authorId], references: [userId])

  postId String 
  post   Post   @relation(fields: [postId], references: [postId])

  @@map("comments")
}
